# Aditya: 4,5, 6, 7, 8, 15,16, 18, 19

Sec3.1.
1. Should define system as a tuple 
  (DiscModes, ContStates, Inputs, Outputs)
2. Define Switched-Mode system as a map from
  DiscModes to \{ ContStates_i \}, where ContStates_i \cap ContStates_j = \emptyset
  and \cup \ContStates_i = \ContStates (I.e. \ContStates_i is a partition of \ContStates)

Replace Definition 3.1. with something like this:
3. Define operational semantics of black-box system 
  -  Define inputs as piecewise constant signals
     An input u is a function from [0,T] to \Inputs, such that for all t in [0,T]
     u(t) = u_(\floor{\frac{t}{\Delta}}), where {u_0,...,u_N} \in \Inputs, and
     N = \floor{\frac{T}{\Delta}}

  -  Define the system evolution as a map in similar fashion to what is already there

4. Let's kill the discussion on Lipschitz continuity: this is a bit pointless. The first
  line of the assumption is enough. Everything under "system assumptions" can be compressed
  to a small footnote.

Sec3.2. 
5. Do we need to refer to our work in third person any more?
6. We need to compare with Paulo's discrete abstraction of continuous space. I think our 
   graph-based abstraction is at least a simulation relation.
7. Kill the discussion on regression from the first para titled 'discrete abstraction'
8. Def. 3.2., add the condition "and Q_\eps(x) = C and Q_\eps(x') = C'"
9. Instead of diving into "enriching the graph-based abstraction", lets recap more 
   from the EMSOFT '14 paper here. Let's push the discussion on enriching to the last
   paragraph as a lead-in to Sec.4. Let's compress the discussion on enrichment in this
   section. We have space, let's use it to bring more of our EMSOFT '14 paper! E.g. 
   let's have an example carefully defining refinement by state-splitting. Then, explain
   how this leads to a blowup. 

Sec4. 
10. Pull the discussions from end of 3.2 to 4. Make a subsection called, 'Enriching the
    model from the EMSOFT14 paper'. Then say that the theoretical model for the resulting 
    abstraction is a PWATS. Then introduce a new section for PWATS.
11. Kill PWA-RM. This is kinda redundant. We can simply say that we now model a black-
    box system as a PWATS.  
12. Introduce an algorithm to construct PWATS from a black-box system. Introduce subroutines
    in the algorithm (such as 'LearnEdgeRelations', 'LearnSourceSet', 'LearnDestinationSet')
    - One example of LearnEdgeRelations then simply becomes linear regression. You can now
      say that this can be any generic algebraic relation. (to be explained in a later section)
    - LearnSourceSet can become (1) simply the cell of origin, (2) convex hull of source 
      states
    - LearnDestinationSet can become (1) simply the destination cell, (2) convex hull of 
      destination states
13. Move 4.2. to after Section 5. (Maybe call it Section 6)
    - Introduce Section 6 as 'Bounded Model Checking of PWATS'
    - Introduce subsection showing how to translate the PWATS to an SMT query
14. Talk about the subtleties of SMT solving for BMC here. 
    - Lazy vs. eager
    - Nonlinear relations vs. PWA
    - Using SMT features to expedite stuff.
   
Sec 6.
15. I find the current 6.1. a bit of WTF? I think most of it should be absorbed into other
    sections and rest of it should die

16. Introduce Section 7 as 'Refinement of PWATS'. This needs some thought, but I think
    it may be possible to repackage k-relational modeling as a refinement of the PWATS.
    - Most important: introduce an algorithm showing refinement from 0-relational PWATS
      to k-relational PWATS

17. The two paragraphs at the end of current Section 6 are giant WTFs. WHat is this?

Sec 7.
18. This is the hardest. I think we need to breakup Section 7 and cannibalize it as a running 
    example. Move parts of this into various sections to explain the various methods. We can
    make the paper much more accessible this way. Section 7 needs to die and be reborn through-
    out the paper.

Sec. 8.
19. MOAR BENCHMARKS!

